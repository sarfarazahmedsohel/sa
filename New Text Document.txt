1.writ a Matlab program for uni polar non return to zero NRZ line coding
%Unipolar Non Return to Zero Line Coding 
clc;
clear all;
close all;
N=10;				%Number of bits
n=randi([0,1],1,N)		%Random bit generation
%Mapping Function
for m=1:N
  	    if n(m)==1
        	nn(m)=1;
    	    else 
        	    	nn(m)=0;
    	    end
end
nn
%Signal Shaping
i=1;
t=0:0.01:length(n);		%100 Times duration set up for a single binary bit
for j=1:length(t)		%Indexing set-up for time duration
   	    if t(j)<=i	           		%Binary input data index Check-up Condition
        		y(j)=nn(i);		%Assign value from the mapping function
    	    else
        		y(j)=nn(i);
        		i=i+1;			%Binary input data index increment
    end
end
plot(t,y, 'linewidth',2);
axis([0,N,-1.5,1.5]);		%Axis set-up
grid on;
title("Unipolar NZR Signaling");


2. write amatlab program for polar non return to zero nrz lind coding 
%Polar Non Return to Zero Line Coding 
clc;
clear all;
close all;
N=10;				%Number of bits
n=randi([0,1],1,N)		%Random bit generation
%Mapping Function
for m=1:N
  	    if n(m)==1
        	nn(m)=1;
    	    else 
        	    	nn(m)=-1;
    	    end
end
nn
%Signal Shaping
i=1;
t=0:0.01:length(n);		%100 Times duration set up for a single binary bit
for j=1:length(t)		%Indexing set-up for time duration
   	    if t(j)<=i	           		%Binary input data index Check-up Condition
        		y(j)=nn(i);		%Assign value from the mapping function
    	    else
        		y(j)=nn(i);
        		i=i+1;			%Binary input data index increment
    end
end
plot(t,y, 'linewidth',2);
axis([0,N,-1.5,1.5]);		%Axis set-up
grid on;
title("Polar NZR Signaling");

3.write a matlab program for uni poler return to zero rz line coding 
%RZ Unipolar line coding
clc;
clear all;
close all;
N=10;                         		%Number of bits
n=randi([0,1],1,N)            	%Random bit generation
%RZ Pulse Shaping
i=1;
a=0;                         		%Initial value for the first half cycle
b=0.5;                        		%Initial value for the second half cycle 
t=0:0.01:length(n);
for j=1:length(t)
    if t(j)>=a && t(j)<=b     	%Condition for the first half cycle
        y(j)=n(i);            		%Assign first 50 values for 
    elseif t(j)>b && t(j)<=i  	%Condition for the Second half cycle
        y(j)=0;               		%Set all values 0 for the second half cycle
    else
            i=i+1;           		%Binary input data index increment
            a=a+1;            		%Initial value for the first half cycle increment
            b=b+1;            		%Initial value for the second half cycle increment
    end
end
plot(t,y,'lineWidth', 2);     	%Linewidth 2 for clear visualization
axis([0,N,-1.5,1.5]);         	%Axis set-up
grid on;
title('Unipolar return-to-zero (RZ) signaling');

4.write a matlab program for bi polar return to zero rz lin coding 
%Bipolar Return to Zero Signaling 
clc;
clear all;
close all;
N=10;                   %Number of bits
n=randi([0,1],1,N)      %Random bit generation
%Binary to Bipolar Conversion
f=1;
for m=1:N
    if n(m)==1
        if f==1
            nn(m)=1;
            f=-1;
        else 
            nn(m)=-1;
            f=1;
        end
    else
        nn(m)=0;
    end
end
nn
%Bipolar RZ Pulse Shaping
i=1;
a=0;                            %Initial value for the first half cycle	
b=0.5;                          %Initial value for the second half cycle 
t=0:0.01:length(n);
for j=1:length(t)
    	if t(j)>=a && t(j)<=b       %Condition for the first half cycle
        		y(j)=nn(i);             %Assign first 50 values for 
    	elseif t(j)>b && t(j)<=i    %Condition for the Second half cycle
        		y(j)=0;                 %Set all values 0 for the second half cycle
    	else
            	i=i+1;              %Binary input data index increment
           		a=a+1;              %Initial value for the first half cycle increment
            	b=b+1;              %Initial value for the second half cycle increment
    	end
       end
       plot(t,y,'lineWidth', 2);       %Linewidth 2 for clear visualization
       axis([0,N,-1.5,1.5]);           %Axis set-up
       grid on;
       title('Bipolar return-to-zero (BRZ) signaling');

5.write a matlab program for split phas manchester code
%Split Phase-Manchester Coding
clc;
clear all;
close all;
N=10;                   %Number of bits
n=randi([0,1],1,N)      %Random bit generation
%Binary to Manchester Conversion
nnn=[];
for m=1:N
    if n(m)==1
        nn=[1 -1];
    else
        nn=[-1 1];
    end
    nnn=[nnn nn];
end  
nnn
%Manchester Coding Pulse Shaping
i=1;
l=0.5;
t=0:0.01:length(n);
for j=1:length(t)
    if t(j)<=l                      %Condition for the first half cycle
        y(j)=nnn(i);                %Assign first 50 values for 
    else
        y(j)=nnn(i);
        i=i+1;
        l=l+0.5;
    end
end
plot(t,y,'lineWidth', 2);           %Linewidth 2 for clear visualization
axis([0,N,-1.5,1.5]);               %Axis set-up
grid on;
title('Manchester Coding');

6.write amatlab prgram for binary amplitude shit keying (ask) modulation and demulation 
ASK Source Code:
clc;
clear all;
close all;
x=[1 0 1 0 1 0 1 0 1];
bp=0.000001;
disp('Binary Information at transmitter'); disp(x);
%Representation of Transmitting binary information as digital signal bit=[];
for n=1:1:length(x) if
x(n)==1;
se=ones(1,100); else
x(n)==0;
se=zeros(1,100);
end
end
bit=[bit se];
t1=bp/100:bp/100:100*length(x)*(bp/100); subplot(3,1,1)
plot(t1,bit,'linewidth',2.5);
grid on;
axis([0 bp*length(x) -0.5 1.5]);
ylabel('Amplitude (volt)'); xlabel('Time
(sec)');
title('Transmitting Information as Digital Signal');
%Binary ASK Modulation
A1=10;
A2=5;
br=1/bp;
f=br*10;
t2=bp/99:bp/99:bp;
ss=length(t2); m=[];
for(i=1:1:length(x)) if
x(i)==1;
y=A1*cos(2*pi*f*t2); else
y=A2*cos(2*pi*f*t2);
end
end
m=[m y];
t3=bp/99:bp/99:bp*length(x); subplot(3,1,2)
plot(t3,m);
grid on;
xlabel('Time(sec)');
ylabel('Amplitude (volt)');
title('Waveform for binary ASK Modulation corresponding binary information');
%Binary ASK Demodulation
mn=[];
for n=ss:ss:length(m)
t=bp/99:bp/99:bp;
y=cos(2*pi*f*t); mm=y.*m((n-
(ss-1)):n); t4=bp/99:bp/99:bp;
z=trapz(t4,mm);
zz=round((2*z/bp)); if(zz>7.5)
a=1;
else
a=0;
end
mn=[mn a];
end
disp('Binary Information at Receiver'); disp(mn);
%Represntation of Binary data into Digital signal bit=[];
for n=1:length(mn)
if mn(n)==1;
se=ones(1,100);
else
se=zeros(1,100); end
bit=[bit se];
end t4=bp/100:bp/100:100*length(mn)*(bp/100);
subplot(3,1,3) plot(t4,bit,'linewidth',2.5);
grid on;
axis([0 bp*length(mn) -0.5 1.5]);
xlabel('Time(sec)'); ylabel('Amplitude
(volt)');
title('Received information as Digital Signal');
7.write a matlab program for frequency shift keying (fsk) modulation and demulation
FSK Source Code:
%FSK Modulation and Demodulation by Tarun Debnath
clc; clear all;
close all;
x=[1 1 0 1 0 1];
bp= 0.000001;
disp('Binary information at transmitter'); disp(x);
% Representation of Transmitting binary information as digital signal bit=[];
for n=1:1:length(x) if
x(n)==1;
se=ones(1,100); else
x(n)==0;
se=zeros(1,100);
end
end
bit=[bit se];
t1=bp/100:bp/100:100*length(x)*(bp/100); subplot(3,1,1);
plot(t1,bit,'linewidth',2.5);
grid on;
axis([0 bp*length(x) -0.5 1.5]);
ylabel('amplitude(volt)'); xlabel('time(sec)');
title('Transmitting information as digital signal');
%Binary FSK Modulation
A=5;
br=1/bp;
f1=br*8;
f2=br*2;
t2=bp/99:bp/99:bp;
ss=length(t2); m=[];
for(i=1:1:length(x))
if(x(i)==1)
y=A*cos(2*pi*f1*t2); else
y=A*cos(2*pi*f2*t2);
end
end
m=[m y];
t3=bp/99:bp/99:bp*length(x); subplot(3,1,2);
plot(t3,m); xlabel('Time(sec)');
ylabel('Amplitude(volt)');
title('Waveform for binary FSK modulation corresponding binary information');
% Binary FSK Demodulation
mn=[];
for n=ss:ss:length(m)
t=bp/99:bp/99:bp;
y1=cos(2*pi*f1*t)
y2=cos(2*pi*f2*t)
mm=y1.*m((n-(ss-1)):n);
mmm=y2.*m((n-(ss-1)):n);
t4=bp/99:bp/99:bp;
z1=trapz(t4,mm)
z2=trapz(t4,mmm)
zz1=round(2*z1/bp)
zz2=round(2*z2/bp)
if(zz1>A/2)%logic level=(0+A)/2 or (A+0)/2 or 2.5 in this case a=1;
else(zz2>A/2)
a=0;
end
end
mn=[mn a];
disp('Binary information at Receiver'); disp(mn);
%Representation of Binary Information as digital signal bit=[];
for n=1:length(mn);
if(mn(n)==1);
se=ones(1,100); else
mn(n)==0;
se=zeros(1,100);
end
end
bit=[bit se];
t4=bp/100:bp/100:100*length(mn)*(bp/100); subplot(3,1,3);
plot(t4,bit,'Linewidth',2.5);
grid on;
axis([0 bp*length(mn) -0.5 1.5]);
ylabel('amplitude(volt)'); xlabel('Time(sec)');
title('Received Information as digital signal after binary FSK demodulation');
8.write a matlab program for phase shift keying (psk) modulation and demulation
PSK Source Code:
clc;
clear all;
close all;
x=[1 0 1 0 1 0 1 0 1];
bp=0.000001;
disp('Binary Information at transmitter'); disp(x);
%Representation of Transmitting binary information as digital signal bit=[];
for n=1:1:length(x) if
x(n)==1;
se=ones(1,100); else
x(n)==0;
se=zeros(1,100);
end
end
bit=[bit se];
t1=bp/100:bp/100:100*length(x)*(bp/100); subplot(3,1,1)
plot(t1,bit,'linewidth',2.5);
grid on;
axis([0 bp*length(x) -0.5 1.5]);
ylabel('Amplitude (volt)'); xlabel('Time
(sec)');
title('Transmitting Information as Digital Signal');
%Binary PSK Modulation
A=5;
br=1/bp;
f=br*2;
t2=bp/99:bp/99:bp;
ss=length(t2); m=[];
for(i=1:1:length(x)) if
x(i)==1;
y=A*cos(2*pi*f*t2); else
y=A*cos(2*pi*f*t2+pi); %Acos(2*pi*f*t+pi) means -Acos(2*pi*f*t)
end
end
m=[m y];
t3=bp/99:bp/99:bp*length(x); subplot(3,1,2);
plot(t3,m);
grid on;
xlabel('Time(sec)');
ylabel('Amplitude (volt)');
title('Waveform for binary PSK Modulation corresponding binary information');
%Binary FSK Demodulation
mn=[];
for n=ss:ss:length(m)
t=bp/99:bp/99:bp;
y=cos(2*pi*f*t); %Carrier signal
mm=y.*m((n-(ss-1)):n); t4=bp/99:bp/99:bp;
z=trapz(t4,mm); %Intregation
end
zz=round(2*z/bp);
if(zz>0)
a=1;
else
a=0;
end
mn=[mn a];
disp('Binary Information at Receiver After PSK Demodulation'); disp(mn);
%Represntation of Binary data into Digital signal bit=[];
for n=1:length(mn)
if mn(n)==1;
se=ones(1,100);
else
se=zeros(1,100); end
bit=[bit se];
end t4=bp/100:bp/100:100*length(mn)*(bp/100);
subplot(3,1,3) plot(t4,bit,'linewidth',2.5);
grid on;
axis([0 bp*length(mn) -0.5 1.5]);
xlabel('Time(sec)'); ylabel('Amplitude
(volt)');
title('Received information as Digital Signal'); 

9.write amatlab program for quadrature phase shirt keying (qpsk) modulation and demulation
%QPSK waveform generation
clc; clear all; close all;
%x=[0 1 0 1]; %input bits
x=randi([0 1],1,10)
%Bits to polar
for i=1:length(x)
if x(i)==0
p(i)=-1;
else
p(i)=1;
end
end
%Seperation of even and odd sequences
even_seq=p(1:2:length(x));
odd_seq=p(2:2:length(x));
%NRZ polar line coder signal generation
i=1;
t=0:0.01:length(x);
m=2:2:length(x);
for j=1:length(t)
if t(j)<=m(i)
even_ps(j)=even_seq(i);
else
even_ps(j)=even_seq(i);
i=i+1;
end
end
i=1;
m=2:2:length(x);
for j=1:length(t)
if t(j)<=m(i)
odd_ps(j)=odd_seq(i);
else
odd_ps(j)=odd_seq(i);
i=i+1;
end
end
figure(1);
subplot(211);
plot(t,even_ps,'r');
subplot(212);
plot(t,odd_ps,'r');
%Carrier signals generation
c1=cos(2*pi*1*t);
c2=sin(2*pi*1*t);
figure(2);
subplot(211);
plot(t,c1,'r');
subplot(212);
plot(t,c2,'b');
%QPSK Wveform generation
r1=even_ps.*c1;
r2=odd_ps.*c2;
qpsk_sig=r1-r2;
figure(3);
subplot(311);
plot(t,r1,'r');
subplot(312);
plot(t,r2,'b');
subplot(313);
plot(t,qpsk_sig,'b');

10.write a matlab program for pulse amplitude modulation (pam) and medulation
%PAM(Pulse Amplitude Modulation) waveform generation
clc;
clear all;
close all;
fc=20;
fm=2;
fs=1000;
t=1;
n=[0:1/fs:t]
n=n(1:end-1)
duty=20;
s= square(2*pi*fc*n,duty);
s(find(s<0)) = 0;
figure(1);
m=sin(2*pi*fm*(n-1));
period_samp=length(n)/fc;
ind=1:period_samp:length(n);
on_samp=ceil(period_samp*duty/100);
on_samp
pam=zeros(1,length(n));
for i=1:length(ind)
pam(ind(i):ind(i)+on_samp) = m(ind(i));
end
subplot(3,1,1);plot(n,s);ylim([-0.2 1.2]);
subplot(3,1,2);plot(n,m);ylim([-1.2 1.2]);
subplot(3,1,3);plot(n,pam);ylim([-1.2 1.2]);